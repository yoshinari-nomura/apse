#!/bin/bash

# apse -- Handy Wi-Fi access point selector
#
# MIT License:
#
# Copyright (c) 2020 Yoshinari Nomura <nom@quickhack.net>.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# * Known Issues:
#   + Fails if Wi-Fi SSID involves TAB.

# Usage
#
function usage()
{
  echo "Usage: apse [-a | -c SSID | -l | -m | -h]"
  echo "Select Wi-Fi AP based on the signal strength."
  echo "  apse -a      ... Auto-connect to best-signal AP"
  echo "  apse -c SSID ... Connect to SSID"
  echo "  apse -l      ... List available APs"
  echo "  apse -m      ... Menu items for Argos"
  echo "  apse [-h]    ... Help"
} >&2

# Check if Wi-Fi is enabled
#
function wifi_enabled()
{
  if [ $(nmcli -c no -t radio wifi) = "enabled" ]; then
    return 0
  else
    return 1
  fi
}

# Frequency 2.4GHz or 5GHz
#
function frequency_to_icon()
{
  local freq_string="$1"
  case "$freq_string" in
    5*)
      echo "<span color='green'>5G</span>"
      ;;
    2*)
      echo "<span color='orange'>2G</span>"
      ;;
    esac
}

# Should I switch Wi-Fi access-point from CURRENT_AP to CANDIDATE_AP
#
function should_switch_ap()
{
  local current_ap="$1"
  local candidate_ap="$2"
  local cur=$(ap_get signal "$current_ap")
  local can=$(ap_get signal "$candidate_ap")

  if (( "$cur" > 65 )); then
    echo "no"
    return 1
  fi

  if (( "$can" - "$cur" > 10 )); then
    echo "yes"
    return 0
  fi

  echo "no"
  return 1
}

# List available Wi-Fi APs in descending order of signal strength.
#
# Example:
#   IN-USE,SIGNAL,MODE,FREQ,RATE,SSID,AUTOCONNECT
#   *:77:Infra:5240 MHz:540 Mbit/s:AVAILABLE-SSID1,yes
#    :50:Infra:2447 MHz:195 Mbit/s:AVAILABLE-SSID2,yes
#    :39:Infra:5180 MHz:405 Mbit/s:AVAILABLE-SSID3,no
#
function available_ap_list()
{
  if ! wifi_enabled; then
    return 1
  fi

  local T=$'\t'
  local sort="sort -u -k 1,1 -t"
  local nm="nmcli -c no -t -g"
  local unesc="sed s/^:/\t/;s/\([^\]\):/\1\t/g;s/[\]:/:/g"

  local f1="SSID,IN-USE,SIGNAL,FREQ,RATE,MODE"
  local f2="NAME,AUTOCONNECT"

  # IN-USE,SIGNAL,MODE,FREQ,RATE,SSID,AUTOCONNECT
  local order="1.2,1.3,1.6,1.4,1.5,1.1,2.2"

  # local all="-a 1"
  local all=""

  join -t "$T" -e none $all -o "$order" \
       <($nm $f1 dev wifi list | $unesc | $sort "$T") \
       <($nm $f2 con show | $unesc | $sort "$T") \
    | sort -nr -k 2,2 -t "$T"
}

# Connect to Wi-Fi AP
#
# arg1 (AP) is in the form:
#   "*:77:Infra:5240 MHz:540 Mbit/s:AVAILABLE-SSID1"
#
function connect_ap
{
  local ssid=$(ap_get ssid "$1")
  nmcli connection up "$ssid"
}

# Get PROPERTY from AP data structure
#
# arg1 (PROPERTY) is one of: in-use,signal,mode,freq,rate,ssid,ap-type
# arg2 (AP) is in the form:
#   "*:77:Infra:5240 MHz:540 Mbit/s:EXAMPLE-SSID1:yes"
#
function ap_get()
{
  local property="$1"
  local ap="$2"

  local props="in-use:1 signal:2 mode:3 freq:4 rate:5 ssid:6 ap-type:7"
  local field=$(echo "$props" | sed -n "s/.*$property:\([0-9]*\).*/\1/p")
  local value=$(echo "$ap" | cut -d $'\t' -f $field)

  case "$property" in
    in-use)
      # * → yes, " " → no
      value="${value/\*/yes}"
      value="${value/ /no}"
      ;;
    ap-type)
      # yes → auto, no → manual, none → unknown
      value="${value/yes/auto}"
      value="${value/none/unknown}"
      value="${value/no/manual}"
      ;;
    signal)
      value=${value:-0}
      ;;
    *)
      ;;
  esac

  echo "$value"
}

# Find best Wi-Fi AP significantly better than current one
#
function find_best_ap()
{
  local best_ap=
  local ap=
  local current_ap=

  while IFS= read -r ap
  do
    # the first entry should have max-signal
    best_ap=${best_ap:-"$ap"}

    if [ $(ap_get in-use "$ap") = yes ]; then
      current_ap="$ap"
    fi
  done < <(available_ap_list)

  if [ $(should_switch_ap "$current_ap" "$best_ap") = yes ]; then
    echo "$best_ap"
  fi
}

################################################################
## Argos support https://github.com/p-e-w/argos

function argos_menu()
{
  local ap_list=$(available_ap_list)
  argos_menu_from_available_ap_list "$ap_list"
}

function argos_menu_from_available_ap_list()
{
  local available_ap_list="$1"
  local best_ap=
  local ap=
  local current_ap=

  local argos_title
  local argos_hrule="---"
  local argos_items argos_item
  local item_signal item_ssid item_freq item_attr

  while IFS= read -r ap
  do
    if [ -z "$ap" ]; then
      continue
    fi

    # the first entry should have max-signal
    if [ -z "$best_ap" ]; then
      best_ap="$ap"
    fi

    if [ $(ap_get in-use "$ap") = yes ]; then
      current_ap="$ap"
      item_icon=":heavy_check_mark:"
    elif [ $(ap_get ap-type "$ap") = auto ]; then
      item_icon=":small_blue_diamond:"
    else
      item_icon=":white_small_square:"
    fi

    item_signal=$(printf "%-3d" $(ap_get signal "$ap"))
    item_ssid="<span color='blue'>$(ap_get ssid "$ap")</span>"
    item_freq="$(frequency_to_icon $(ap_get freq "$ap"))"
    item_attr="bash='apse -c $(ap_get ssid "$ap")' terminal=false font=monospace refresh=true"

    argos_item="$item_icon $item_freq $item_signal $item_ssid | $item_attr"
    argos_items="$argos_items$argos_item\n"

  done <<< "$available_ap_list"

  argos_title="$argos_title$(ap_get ssid "$current_ap")"
  max_signal=$(ap_get signal "$best_ap")
  cur_signal=$(ap_get signal "$current_ap")

  # Switch AP if the best AP is significantly better than current AP
  # Note: bash takes null string as 0 in ((...)) notation.
  #
  if [ $(should_switch_ap "$current_ap" "$best_ap") = yes ]; then
    argos_title="$argos_title!"
  fi

  echo "$argos_title | iconName=network-wireless"
  echo "$argos_hrule"
  echo -ne "$argos_items"
}

################################################################
## Main

# Parse options
while getopts "ac:lmh" flag
do
  case $flag in
    # getopts sets '?' to flag on error.
    a)    OPT_OPERATION="autoconnect"
          ;;
    c)    OPT_OPERATION="connect"
          OPT_CONNECT_SSID="$OPTARG"
          ;;
    l)    OPT_OPERATION="list"
          ;;
    m)    OPT_OPERATION="argos"
          ;;
    \?|h) OPT_ERROR=1
          ;;
  esac
done
shift $(( $OPTIND - 1 ))

# Invoked by Argos with no args
if [ -z "$OPT_OPERATION" -a -n "$ARGOS_VERSION" ]; then
  OPT_OPERATION=argos
fi

# Unknown option
if [ "$OPT_ERROR" = 1 -o -z "$OPT_OPERATION" -o $# -ne 0 ]; then
  usage
  exit 1
fi

case "$OPT_OPERATION" in
  argos)
    argos_menu
    ;;
  list)
    available_ap_list
    ;;
  connect)
    echo "connection up $OPT_CONNECT_SSID"
    nmcli connection up "$OPT_CONNECT_SSID"
    ;;
  autoconnect)
    best_ap=$(find_best_ap)
    if [ -n "$best_ap" ]; then
      echo "Switch connection to $(ap_get ssid "$best_ap")."
      connect_ap "$best_ap"
    else
      echo "Not found."
    fi
    ;;
  *)
    usage
    exit 1
    ;;
esac
